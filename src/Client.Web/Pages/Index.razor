@page "/"
@using Client.Services.Contracts;
@using Microsoft.Graph;
@using Radzen
@using Radzen.Blazor.Rendering
<PageTitle>Stime | Index</PageTitle>
@inject IEventsService EventService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject ISearchBar SearchBarService
@*<RadzenButton Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" class="rz-border-radius-10 rz-shadow-10" />*@

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

<RadzenButton Variant="Variant.Flat" Text="New Meeting" ButtonStyle="ButtonStyle.Primary" />

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="AppointmentData" Data=@appointments StartProperty="Start" EndProperty="End"
                 TextProperty="Text" SelectedIndex="2"
                 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>

    <RadzenTemplateForm Data="@order" Submit="@((Order args) => { Submit(args); })">
    <div class="container-fluid">
        <div class="row">   
            <div class="col-md-6">
                <RadzenFieldset Text="Find free time">
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Session type" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="order.CardId" AllowClear="true" Placeholder="Select an option" Data="@cards" style="width: 100%;" TextProperty="CardNr" ValueProperty="CardId" Name="CardId">
                            </RadzenDropDown>
                        </div>
                    </div>
                    @if (order.CardId == 2)
                    {
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Teamates" />
                            </div>
                            <div class="col-md-8">
                                <RadzenAutoComplete @bind-Value=@searchValue Change=@OnChange LoadData=@OnLoadData Data=@users Placeholder="Search for users" TextProperty="DisplayName" style="width: 100%;">
                                <Template Context="user">
                                    @user.DisplayName
                                </Template>
                            </RadzenAutoComplete>
                            <RadzenText TextStyle="TextStyle.Body2">
                                Start typing e.g. Alex
                            </RadzenText>
                            </div>
                        </div>
                        <RadzenFieldset AllowCollapse="true" Style="width: 700px; margin: 40px auto;">
                            <HeaderTemplate>
                                <span class="d-inline-flex align-items-center align-middle">
                                    <RadzenIcon Icon="account_box" class="me-1" /><b>Selected Users</b>
                                </span>
                            </HeaderTemplate>
                            <ChildContent>
                                <RadzenDataList PageSize="4" WrapItems="true" AllowPaging="true"
                                            Data="@selectedUsers" TItem="User">
                                    <Template Context="user">
                                        <RadzenCard Style="width: 250px">
                                            <div class="d-flex flex-row align-items-center">
                                                <div>
                                                    <h4 class="mb-0">@(user.DisplayName.Split(" ")[0] + " " + user.DisplayName.Split(" ")[1])</h4>
                                                    <div>@user.UserPrincipalName</div>
         
                                                </div>
                                            </div>
                                        </RadzenCard>
                                    </Template>
                                </RadzenDataList>
                            </ChildContent>
                            <SummaryTemplate>
                                <RadzenCard class="mt-3">
                                    <b>@selectedUsers.Count() Users</b>
                                </RadzenCard>
                            </SummaryTemplate>
                        </RadzenFieldset>
                    }
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Activity " />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox style="width: 100%;" Name="CardNr" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Label" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="order.LabelId" AllowClear="true" Placeholder="Select an option" Data="@labelTypes" style="width: 100%;" TextProperty="Label" ValueProperty="LabelId" Name="LabelId">
                            </RadzenDropDown>
                        </div>
                    </div>                    
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Time duration" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="order.HourRangeId" AllowClear="true" Placeholder="Select an option" Data="@hourRanges" style="width: 100%;" TextProperty="HourRange" ValueProperty="HourRangeId" Name="HourRangeId">
                            </RadzenDropDown>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Break duration" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="order.BreakId" AllowClear="true" Placeholder="Select an option" Data="@breakRanges" style="width: 100%;" TextProperty="BreakRange" ValueProperty="BreakId" Name="BreakId">
                            </RadzenDropDown>
                        </div>
                    </div>
                </RadzenFieldset>
            </div>
        </div>
    </div>
</RadzenTemplateForm>

@code {
    RadzenScheduler<AppointmentData> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    List<AppointmentData> appointments = new List<AppointmentData>();

    string searchValue;

    List<User> users = new ();
    List<User> selectedUsers = new();

    protected async Task OnChange(dynamic args)
    {
        if (selectedUsers.Where(user => user.DisplayName == args).Count() == 0)
        {
            var user = users.Where(user => user.DisplayName == args).FirstOrDefault();
            if (user is not null)
            {
                selectedUsers.Add(user);
                StateHasChanged();
            }
        }
    }

    protected async Task OnLoadData(LoadDataArgs args)
    {
        users = (await SearchBarService.FindUser(args.Filter, GraphServiceClient)).ToList();
    }

    protected async override Task OnInitializedAsync()
    {
        var events = await EventService.GetMyEvents(GraphServiceClient);

        foreach(var ev in events)
        {
            appointments.Add(new AppointmentData()
                {
                    Start = DateTime.Parse(ev.Start.DateTime),
                    End = DateTime.Parse(ev.End.DateTime),
                    Text = ev.Subject
                });
        }

        StateHasChanged();
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        Console.WriteLine($"SlotSelect: Start={args.Start} End={args.End}");
        /*
        * 
        AppointmentData data = await DialogService.OpenAsync<AddAppointmentPage>("Add AppointmentData",
            new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
            appointments.Add(data);
            // Either call the Reload method or reassign the Data property of the Scheduler
            await scheduler.Reload();
    }
    */
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<AppointmentData> args)
    {
        Console.WriteLine($"AppointmentSelect: AppointmentData={args.Data.Text}");

        //await DialogService.OpenAsync<EditAppointmentPage>("Edit AppointmentData", new Dictionary<string, object> { { "AppointmentData", args.Data } });

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<AppointmentData> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }


    // ------- form -------
    public class Order
    {
        public int CardId { get; set; }
        public string CardNr { get; set; }

        public string HourRangeId { get; set; }
        public string HourRange { get; set; }

        public string LabelId { get; set; }
        public string LabelRange { get; set; }
        
        public string BreakId { get; set; }
        public string BreakRange { get; set; }
        
        public DateTime ExpiryDate { get; set; }
        public string CardHolder { get; set; }
        public string Name { get; set; }
        public string Address1 { get; set; }
        public string Address2 { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public string Zip { get; set; }
        public int Country { get; set; }
        public int StoreId { get; set; }
        public string Warehouse { get; set; }
        public string Region { get; set; }
        public string System { get; set; }
        public int TransId { get; set; }
        public string Register { get; set; }
        public string Clerk { get; set; }
        public decimal Amount { get; set; }
        public decimal Tax { get; set; }
        public DateTime OrderDate { get; set; }
        public DateTime ShipDate { get; set; }
    }

    public class CreditCard
    {
        public int CardId { get; set; }
        public string CardNr { get; set; }
    }

    public class Hours
    {
        public int HourRangeId { get; set; }
        public string HourRange { get; set; }
    }

    public class Labels
    {
        public int LabelId { get; set; }
        public string Label { get; set; }
    }

    public class Breaks
    {
        public int BreakId { get; set; }
        public string BreakRange { get; set; }
    }

    public class Country
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    Order order = new Order()
        {
            ExpiryDate = DateTime.Parse("10/10/2022"),
            OrderDate = DateTime.Now,
            ShipDate = DateTime.Now
        };

    List<Hours> hourRanges = new List<Hours>()
    {
        new Hours() { HourRangeId = 1, HourRange = "Less than 1 hour"},
        new Hours() { HourRangeId = 2, HourRange = "1 to 2 hours"},
        new Hours() { HourRangeId = 3, HourRange = "2 to 3 hours"},
        new Hours() { HourRangeId = 4, HourRange = "3 to 4 hours"},
        new Hours() { HourRangeId = 5, HourRange = "More than 4 hours"}
    };

    List<Labels> labelTypes = new List<Labels>()
    {
        new Labels() { LabelId = 1, Label = "Study"},
        new Labels() { LabelId = 2, Label = "Sport"},
        new Labels() { LabelId = 3, Label = "Entertainment"},   
    };

    List<Breaks> breakRanges = new List<Breaks>()
    {
        new Breaks() { BreakId = 1, BreakRange = "10 mins"},
        new Breaks() { BreakId = 2, BreakRange = "30 mins"},
        new Breaks() { BreakId = 3, BreakRange = "1 hour"},
        new Breaks() { BreakId = 4, BreakRange = "More than 1 hour"},
    };

    List<CreditCard> cards = new List<CreditCard>()
    {
        new CreditCard() { CardId = 1, CardNr = "Alone" },
        new CreditCard() { CardId = 2, CardNr = "In a group" }
    };

    List<Country> countries = new List<Country>()
{
        new Country() { Id = 1, Name = "USA" },
        new Country() { Id = 2, Name = "Germany" }
    };

    void Submit(Order arg)
    {
        //
    }

    void Cancel()
    {
        //
    }
}