@page "/showprofile"

@using Client.Services.Contracts;
@using Microsoft.Identity.Web
@using Microsoft.Graph
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject IChatService ChatService
@inject IEventsService EventsService

<h1>Me</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-condensed" style="font-family: monospace">
        <tr>
            <th>Property</th>
            <th>Value</th>
        </tr>
        <tr>
            <td>Name</td>
            <td>@user.DisplayName</td>
        </tr>
    </table>
    <button @onclick="CreateChat">Make meeting</button>
}

@code {
    User? user;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await GraphServiceClient.Me.Request().GetAsync();
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    protected async Task CreateChat()
    {
        string[] ids =
        {
            "bf98dc19-3ec1-4258-a86b-b2f7e34f3ce0",
            "83ed636c-a93b-492b-910b-66b4c3922dcf",
            "eed79d6b-5ec3-40d3-8a6c-f95fc03e4319"
    };

        var events = await EventsService.GetMyEvents(GraphServiceClient);

        foreach(var ev in events)
        {
            Console.WriteLine($"Event name: {ev.Subject} | Start time: {ev.Start.DateTime} | End time: {ev.End.DateTime}");
        }
    }
}
